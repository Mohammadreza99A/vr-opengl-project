vec3 diffuse = lightColor * diffuseCoefficient * max(dot(normal, lightDirection), 0.0);
vec3 specular = lightColor * specularCoefficient * pow(max(dot(viewDirection, reflect(-lightDirection, normal)), 0.0), shininess);
vec3 ambient = ambientCoefficient * lightColor;
vec3 lighting = ambient + diffuse + specular;
vec3 color = lighting * texture(skybox, R).rgb;
FragColor = vec4(color, 1.0);



Rr = reflect(R, N);


vec3 reflectColor = texture(envMap, Rr).rgb;
FragColor = vec4(reflectColor, 1.0);


vec3 finalColor = mix(color, reflectColor, reflectance);
FragColor = vec4(finalColor, 1.0);


vec3 lightDirection = normalize(lightPosition - v_frag_coord);
vec3 viewDirection = normalize(u_view_pos - v_frag_coord);
vec3 diffuse = lightColor * diffuseCoefficient * max(dot(N, lightDirection), 0.0);
vec3 specular = lightColor * specularCoefficient * pow(max(dot(viewDirection, reflect(-lightDirection, N)), 0.0), shininess);
vec3 ambient = ambientCoefficient * lightColor;
vec3 lighting = ambient + diffuse + specular;
vec3 color = lighting * materialColour;
FragColor = mix(texture(cubemapSampler, R), vec4(color, 1.0), 0.3);



float specular = lightColor * specularCalculation( N, L, V); 
float diffuse = lightColor * light.diffuse_strength * max(dot(N,L),0.0);
float distance = length(light.light_pos - v_frag_coord);
float attenuation = 1 / (light.constant + light.linear * distance + light.quadratic * distance * distance);
float light = lightColor *light.ambient_strength + attenuation * (diffuse + specular); 

Rr = reflect(R, N);
vec3 reflectColor = texture(envMap, Rr).rgb;
vec3 finalColor = mix(color, reflectColor, reflectance);
FragColor = mix(texture(cubemapSampler, R), vec4(finalColor, 1.0), 0.25);
